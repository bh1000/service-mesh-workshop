apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: full-virtualservice-example # Name of the VirtualService
  namespace: default # Namespace for the resource
spec:
  hosts:
    - my-service # Service host
    - my-service.example.com # FQDN host
  gateways:
    - my-gateway # Gateway resource
    - mesh # Applies to all sidecars
  http:
    - name: http-route-1
      # HTTP route for traffic
      match:
        - uri:
            exact: /exact # Exact URI match
        - uri:
            prefix: /prefix # Prefix URI match
        - uri:
            regex: /regex.* # Regex URI match
        - method:
            exact: GET # HTTP method match
        - headers:
            x-custom-header:
              exact: value # Header match
      route:
        - destination:
            host: my-service # Destination service
            subset: v1 # Subset version
            port:
              number: 80 # Service port
          weight: 80 # Traffic weight
        - destination:
            host: my-service # Destination service
            subset: v2 # Subset version
            port:
              number: 80 # Service port
          weight: 20 # Traffic weight
      timeout: 10s
      # Timeout for requests
      retries:
        attempts: 3 # Number of retry attempts
        perTryTimeout: 2s # Timeout per retry
        retryOn: gateway-error,connect-failure,refused-stream # Retry conditions
      fault:
        delay:
          percentage:
            value: 10 # Delay percentage
          fixedDelay: 5s # Fixed delay duration
        abort:
          percentage:
            value: 5 # Abort percentage
          httpStatus: 500 # HTTP status to abort
      mirror:
        host: my-mirror-service # Mirror destination
        subset: v1 # Mirror subset
        port:
          number: 80 # Mirror port
      mirrorPercentage:
        value: 50 # Mirror traffic percentage
      corsPolicy:
        allowOrigins:
          - exact: https://example.com # Allowed origin
        allowMethods:
          - GET # Allowed method
          - POST # Allowed method
        allowHeaders:
          - X-Custom-Header # Allowed header
        exposeHeaders:
          - X-Custom-Response-Header # Exposed header
        maxAge: 24h
        # Max age for preflight
        allowCredentials: true
        # Allow credentials
      headers:
        request:
          add:
            x-added-header: value # Add request header
          set:
            x-set-header: value # Set request header
          remove:
            - x-remove-header # Remove request header
        response:
          add:
            x-added-response-header: value # Add response header
          set:
            x-set-response-header: value # Set response header
          remove:
            - x-remove-response-header # Remove response header
      rewrite:
        uri: /rewritten # Rewrite URI
        authority: rewritten.example.com # Rewrite authority
      redirect:
        uri: /redirected # Redirect URI
        authority: redirected.example.com # Redirect authority
        redirectCode: 302 # Redirect code
      appendHeaders:
        x-append-header: value # Append header
      removeRequestHeaders:
        - x-remove-request-header # Remove request header
      removeResponseHeaders:
        - x-remove-response-header # Remove response header
      websocketUpgrade: true
      # Enable websocket upgrade
      retries:
        attempts: 2 # Retry attempts
        perTryTimeout: 1s # Timeout per retry
        retryOn: 5xx,connect-failure # Retry conditions
      delegate:
        name: delegated-route # Delegate route name
        namespace: default # Delegate route namespace
    - name: http-route-2
      # Second HTTP route
      match:
        - port: 8080 # Match on port
      route:
        - destination:
            host: my-service-alt # Alternate service
            port:
              number: 8080 # Alternate port
  tls:
    - match:
        - port: 443 # TLS port
          sniHosts:
            - my-service.example.com # SNI host
      route:
        - destination:
            host: my-service-tls # TLS destination
            port:
              number: 443 # TLS port
  tcp:
    - match:
        - port: 3306 # TCP port
      route:
        - destination:
            host: my-mysql-service # TCP destination
            port:
              number: 3306 # TCP port
  exportTo:
    - "." # Export to current namespace
    - "istio-system" # Export to istio-system
  # Additional fields for completeness
  workloadSelector:
    labels:
      app: my-app # Select workloads by label
